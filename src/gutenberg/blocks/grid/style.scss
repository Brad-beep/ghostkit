/**
 * Frontend Styles
 */
@import "../../variables";

// Grid from Bootstrap 4.1
@import "../../bootstrap/functions";
@import "../../bootstrap/variables";
@import "../../bootstrap/grid";
@import "../../bootstrap/breakpoints";

// Row
//
// Rows contain and clear the floats of your columns.
.ghostkit-grid {
    display: flex;
    flex-wrap: wrap;
    margin-right: ($grid-gutter-width / -2);
    margin-left: ($grid-gutter-width / -2);

    // Columns
    //
    // Common styles for small and large grid columns
    // Common properties for all breakpoints
    > .ghostkit-col {
        position: relative;
        display: flex;
        // Fix for previous columns implementation without .ghostkit-col-content
        flex-wrap: wrap;
        width: 100%;
        min-height: 1px; // Prevent columns from collapsing when empty
        padding-right: ($grid-gutter-width / 2);
        padding-left: ($grid-gutter-width / 2);
    }
}
.ghostkit-col-content {
    width: 100%;
}

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-down($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Provide basic `.col-{bp}` classes for equal-width flexbox columns
        .ghostkit-col#{$infix} {
            flex-basis: 0;
            flex-grow: 1;
            max-width: 100%;
        }

        // col size.
        @for $i from 1 through $grid-columns {
            .ghostkit-col#{$infix}-#{$i} {
                @include make-col($i, $grid-columns);
            }
        }

        // col order.
        .ghostkit-col-order#{$infix}-first {
            order: -1;
        }

        .ghostkit-col-order#{$infix}-last {
            order: $grid-columns + 1;
        }

        @for $i from 0 through $grid-columns {
            .ghostkit-col-order#{$infix}-#{$i} {
                order: $i;
            }
        }
    }
}

// Vertical align.
.ghostkit-col > .ghostkit-col-content {
    align-self: flex-start;
}
.ghostkit-grid-align-items-center > .ghostkit-col > .ghostkit-col-content {
    align-self: center;
}
.ghostkit-grid-align-items-end > .ghostkit-col > .ghostkit-col-content {
    align-self: flex-end;
}

// Horizontal align.
.ghostkit-grid-justify-content-center {
    justify-content: center;
}
.ghostkit-grid-justify-content-end {
    justify-content: flex-end;
}
.ghostkit-grid-justify-content-around {
    justify-content: space-around;
}
.ghostkit-grid-justify-content-between {
    justify-content: space-between;
}

// Gaps.
@each $name, $size in $grid-gaps {
    .ghostkit-grid-gap-#{$name} {
        margin-right: ($size / -2);
        margin-left: ($size / -2);

        > .ghostkit-col {
            padding-right: ($size / 2);
            padding-left: ($size / 2);
        }
    }
}

// AWB backgrounds
.ghostkit-grid-with-bg,
.ghostkit-col-with-bg {
    position: relative;

    > .nk-awb {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: -1;
    }
}
.ghostkit-grid-with-bg {
    &.ghostkit-grid-gap-lg > .nk-awb {
        right: 22.5px;
        left: 22.5px;
    }
    &.ghostkit-grid-gap-md > .nk-awb {
        right: 15px;
        left: 15px;
    }
    &.ghostkit-grid-gap-sm > .nk-awb {
        right: 7.5px;
        left: 7.5px;
    }
}
